!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
SPARE_CAPACITY	Vector.h	/^		enum {SPARE_CAPACITY = 16};$/;"	e	enum:Vector::__anon1
Vector	Vector.h	/^		Vector(const Vector &rhs): objects(NULL)$/;"	f	class:Vector	access:public	signature:(const Vector &rhs)
Vector	Vector.h	/^		explicit Vector (theSize = 0)$/;"	f	class:Vector	access:public	signature:(theSize = 0)
Vector	Vector.h	/^class Vector$/;"	c
Vector::SPARE_CAPACITY	Vector.h	/^		enum {SPARE_CAPACITY = 16};$/;"	e	enum:Vector::__anon1
Vector::Vector	Vector.h	/^		Vector(const Vector &rhs): objects(NULL)$/;"	f	class:Vector	access:public	signature:(const Vector &rhs)
Vector::Vector	Vector.h	/^		explicit Vector (theSize = 0)$/;"	f	class:Vector	access:public	signature:(theSize = 0)
Vector::back	Vector.h	/^		const Object & back() const$/;"	f	class:Vector	access:public	signature:() const
Vector::begin	Vector.h	/^		const_iterator &begin() const$/;"	f	class:Vector	access:public	signature:() const
Vector::begin	Vector.h	/^		iterator begin()$/;"	f	class:Vector	access:public	signature:()
Vector::capacity	Vector.h	/^		int capacity() const$/;"	f	class:Vector	access:public	signature:() const
Vector::const_iterator	Vector.h	/^		typedef const Object * const_iterator;$/;"	t	class:Vector	access:public
Vector::empty	Vector.h	/^		bool empty() const$/;"	f	class:Vector	access:public	signature:() const
Vector::end	Vector.h	/^		const_iterator end() const$/;"	f	class:Vector	access:public	signature:() const
Vector::end	Vector.h	/^		iterator end()$/;"	f	class:Vector	access:public	signature:()
Vector::iterator	Vector.h	/^		typedef Object * iterator;$/;"	t	class:Vector	access:public
Vector::object	Vector.h	/^		Object *object;$/;"	m	class:Vector	access:private
Vector::operator =	Vector.h	/^		const Vector & operator= (const Vector &rhs)$/;"	f	class:Vector	access:public	signature:(const Vector &rhs)
Vector::operator []	Vector.h	/^		Object & operator[] (int index)$/;"	f	class:Vector	access:public	signature:(int index)
Vector::operator []	Vector.h	/^		const Object & operator[] (int index) const$/;"	f	class:Vector	access:public	signature:(int index) const
Vector::pop_back	Vector.h	/^		void pop_back()$/;"	f	class:Vector	access:public	signature:()
Vector::push_back	Vector.h	/^		void push_back(const Object &x)$/;"	f	class:Vector	access:public	signature:(const Object &x)
Vector::reserve	Vector.h	/^		void reserve(int newCapacity)$/;"	f	class:Vector	access:public	signature:(int newCapacity)
Vector::resize	Vector.h	/^		void resize(int newSize)$/;"	f	class:Vector	access:public	signature:(int newSize)
Vector::size	Vector.h	/^		int size() const$/;"	f	class:Vector	access:public	signature:() const
Vector::theCapacity	Vector.h	/^		int theCapacity;$/;"	m	class:Vector	access:private
Vector::theSize	Vector.h	/^		int theSize;$/;"	m	class:Vector	access:private
Vector::~Vector	Vector.h	/^	    ~Vector()$/;"	f	class:Vector	access:public	signature:()
back	Vector.h	/^		const Object & back() const$/;"	f	class:Vector	access:public	signature:() const
begin	Vector.h	/^		const_iterator &begin() const$/;"	f	class:Vector	access:public	signature:() const
begin	Vector.h	/^		iterator begin()$/;"	f	class:Vector	access:public	signature:()
capacity	Vector.h	/^		int capacity() const$/;"	f	class:Vector	access:public	signature:() const
const_iterator	Vector.h	/^		typedef const Object * const_iterator;$/;"	t	class:Vector	access:public
empty	Vector.h	/^		bool empty() const$/;"	f	class:Vector	access:public	signature:() const
end	Vector.h	/^		const_iterator end() const$/;"	f	class:Vector	access:public	signature:() const
end	Vector.h	/^		iterator end()$/;"	f	class:Vector	access:public	signature:()
iterator	Vector.h	/^		typedef Object * iterator;$/;"	t	class:Vector	access:public
main	main.cc	/^int main()$/;"	f	signature:()
object	Vector.h	/^		Object *object;$/;"	m	class:Vector	access:private
operator =	Vector.h	/^		const Vector & operator= (const Vector &rhs)$/;"	f	class:Vector	access:public	signature:(const Vector &rhs)
operator []	Vector.h	/^		Object & operator[] (int index)$/;"	f	class:Vector	access:public	signature:(int index)
operator []	Vector.h	/^		const Object & operator[] (int index) const$/;"	f	class:Vector	access:public	signature:(int index) const
pop_back	Vector.h	/^		void pop_back()$/;"	f	class:Vector	access:public	signature:()
push_back	Vector.h	/^		void push_back(const Object &x)$/;"	f	class:Vector	access:public	signature:(const Object &x)
reserve	Vector.h	/^		void reserve(int newCapacity)$/;"	f	class:Vector	access:public	signature:(int newCapacity)
resize	Vector.h	/^		void resize(int newSize)$/;"	f	class:Vector	access:public	signature:(int newSize)
size	Vector.h	/^		int size() const$/;"	f	class:Vector	access:public	signature:() const
theCapacity	Vector.h	/^		int theCapacity;$/;"	m	class:Vector	access:private
theSize	Vector.h	/^		int theSize;$/;"	m	class:Vector	access:private
~Vector	Vector.h	/^	    ~Vector()$/;"	f	class:Vector	access:public	signature:()
